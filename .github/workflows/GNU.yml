name: GNU

on: [push, pull_request]

jobs:
  gnu:
    name: Run GNU tests
    runs-on: ubuntu-latest
    steps:
      # Checks out a copy of your repository on the ubuntu-latest machine
    - name: Checkout code uutil
      uses: actions/checkout@v2
      with:
        path: 'uutils'
    - name: Checkout GNU coreutils
      uses: actions/checkout@v2
      with:
        repository: 'coreutils/coreutils'
        path: 'gnu'
        ref: v8.32
    - name: Checkout GNU corelib
      uses: actions/checkout@v2
      with:
        repository: 'coreutils/gnulib'
        path: 'gnulib'
        ref: 8e99f24c0931a38880c6ee9b8287c7da80b0036b
        fetch-depth: 0 # gnu gets upset if gnulib is a shallow checkout
    - name: Install `rust` toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        default: true
        profile: minimal # minimal component installation (ie, no documentation)
        components: rustfmt
    - name: Install deps
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install autoconf autopoint bison texinfo gperf gcc g++ gdb python-pyinotify python3-sphinx jq
    - name: Build binaries
      shell: bash
      run: |
       cd uutils
       bash util/build-gnu.sh
    - name: Run GNU tests
      shell: bash
      run: |
        bash uutils/util/run-gnu-test.sh
    - name: Extract tests info
      shell: bash
      run: |
        LOG_FILE=gnu/tests/test-suite.log
        if test -f "$LOG_FILE"
        then
            TOTAL=$(sed -n "s/.*# TOTAL: \(.*\)/\1/p"  "$LOG_FILE"|tr -d '\r'|head -n1)
            PASS=$(sed -n "s/.*# PASS: \(.*\)/\1/p" "$LOG_FILE"|tr -d '\r'|head -n1)
            SKIP=$(sed -n "s/.*# SKIP: \(.*\)/\1/p" "$LOG_FILE"|tr -d '\r'|head -n1)
            FAIL=$(sed -n "s/.*# FAIL: \(.*\)/\1/p" "$LOG_FILE"|tr -d '\r'|head -n1)
            XPASS=$(sed -n "s/.*# XPASS: \(.*\)/\1/p" "$LOG_FILE"|tr -d '\r'|head -n1)
            ERROR=$(sed -n "s/.*# ERROR: \(.*\)/\1/p" "$LOG_FILE"|tr -d '\r'|head -n1)
            echo "::warning ::GNU testsuite = TOTAL: $TOTAL / PASS: $PASS / FAIL: $FAIL / ERROR: $ERROR"
            jq -n \
                  --arg date "$(date --rfc-email)" \
                  --arg sha "$GITHUB_SHA" \
                  --arg total "$TOTAL" \
                  --arg pass "$PASS" \
                  --arg skip "$SKIP" \
                  --arg fail "$FAIL" \
                  --arg xpass "$XPASS" \
                  --arg error "$ERROR" \
                  '{($date): { sha: $sha, total: $total, pass: $pass, skip: $skip, fail: $fail, xpass: $xpass, error: $error, }}' > gnu-result.json
          else
            echo "::error ::Failed to get summary of test results"
          fi

    - uses: actions/upload-artifact@v2
      with:
        name: test-report
        path: gnu/tests/**/*.log

    - uses: actions/upload-artifact@v2
      with:
        name: gnu-result
        path: gnu-result.json
